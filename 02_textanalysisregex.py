# -*- coding: utf-8 -*-
"""02 TextAnalysisRegex.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/a-forty-two/EY8Apr2024-AI-Batch2/blob/main/EY05_TextAnalysisRegex.ipynb

# Exploratory Text Analysis

## What kinds of text analysis are there?

* analyst knows the pattern
    * regular expressions
* analyst does not know the pattern
    * natural language processing
        * compares historical examples to judge novel cases
            * comparisons are statistical and approximate
"""

# [a-zA-Z]{3}[ ]?[0-9]{4} -> 3 letters of any case, followed by 1 space (optional), followed by 4 nums!
# ?      means 0 or 1 occurance
# +      means 1 or more occurance
# *      means 0 or more occurance
# ^      means start of the pattern
# $      means end of the pattern

"""### Examples of Analysis

When you know the pattern:
"""

pattern = '£ ?[0-9][0-9]?' # £ then SPACE-optional then digit then digit-optional

document = 'My eggs cost £ 3, bread cost £2, vodka cost £ 35'

import re

re.findall(pattern, document)

"""If you dont:

* sentiment analysis
    * how positive/negative is this (new) review?
* topic analysis
    * what is this document about?

## What can I do if I know what pattern I want to find?

* finding ("extracting")
    * what matches the pattern?
* matching ("validating")
    * does the entire document match YES/NO?
* substitue ("replacing")
    * replace a part that matches a pattern with another...

## How do I validate text with pandas?
"""

import pandas as pd

ti = pd.read_csv('https://raw.githubusercontent.com/a-forty-two/diamler_17_jan/main/titanic.csv')
ti.sample(2)

ti['ticket'] = "Ticket: " + ti['class'] + "; Price: $ " + ti['fare'].astype(str) + "; Port: " + ti['embark_town'] + ";"

ti[['class', 'fare', 'embark_town', 'ticket']].head(3)

pattern = '(First|Second)'

ti['class'].str.match(pattern)

ti.loc[ ti['class'].str.match(pattern)  , 'survived'].mean()

pattern = '(Third)'
ti.loc[ ti['class'].str.match(pattern)  , 'survived'].mean()

"""## How do I extract data with pandas?"""

ti[['class', 'fare', 'embark_town', 'ticket']].head(3)

#just for demo, no real purpose
pattern = '([0-9.]+)'

ti['ticket'].str.extract(pattern).sample(4)

"""## How do I substitue text with pandas?"""

ti['ticket'].str.replace('$', '€').sample(1)

"""## What are regular expressions?

Regular expressions are a language for describing patterns in text.

They are separate from python, but may be used within python program. (And elsewhere, eg., often in SQL).

They are notoriously difficult to read and write; and as a separate language, an additional tool to learn.

## What regular expression patterns can I use?

* literals
    * `a`, find me an `a`
    * `£`, find `£`
    * `!` means `!`
    * ... most symbols mean "find me"
* `.`
    * find any **single** symbol
* character classes -- find a **single** symbol
    * `[abc]` $\rightarrow$ **either** a, b, c
    * `[0-9]` $\rightarrow$ **either** 0, 1, 2, 3,...9
    * `[A-Z]` $\rightarrow$ **either** capital A, B, ... Z
    * inversions
        * `[^abc]` $\rightarrow$ **is not** `a` OR `b` OR `c`
        * `[^a-zA-Z0-9 ]`  $\rightarrow$ **is not** alphanumeric-ish
    
* alternatives -- find the character**s** given by...
    * `(May|June|July)`  $\rightarrow$ **the whole worlds** May OR June..
"""

ti['ticket'].str.extract('(Ticket: (First|Second))')

ti['ticket'].str.extract('( [0-9][0-9])')

ti['ticket'].sample(1)

ti['ticket'].str.extract('(Ticket: [A-Z])').sample(2)

ti['ticket'].str.extract('(T........)').sample(3)

ti['ticket'].str.extract('(Price: [^0-9A-Za-z] ..)').sample(3)

ti['ticket'].str.extract('(Port: (Cherbourg|Southampton))').sample(3)

"""* repetitions
    * optional `?`
        * an optional number: `[0-9]?`
    * one or more `+`
        * one or more spaces: ` +`  
    * optional, or more, `*`
        * ` [0-9][0-9]?.[0-9]*`
    
"""

ti['ticket'].str.extract('([0-9][0-9]?.[0-9]*)').sample(3)

ti['ticket'].str.extract('(Ticket: [a-zA-Z]+)').sample(3)

row = 0
match = 1 # second match

ti['ticket'].str.extractall('([a-zA-Z]+: [a-zA-Z]+)').loc[row, match]

ti['ticket'].str.extract('([a-zA-Z]+tow?n)')

"""* EXTRA:
    * escaping
        * How do I say, literally, the `.` symbol?
        * `\.`
    
"""

ti['ticket'].str.extract('(\$ [0-9]+\.[0-9]+)').sample(2)

"""* positional matching
    * `^` means **at the beginning**
    * `$` means **at the end**
"""

ti['ticket'].str.extractall('([a-zA-Z]+: [a-zA-Z]+;$)').sample(1)

ti['ticket'].str.extractall('(^[a-zA-Z]+: [a-zA-Z]+;)').sample(1)

"""## Next Steps

* review a "Regex Cheat Sheet"
    * also, eg., https://en.wikipedia.org/wiki/Regular_expression#Examples

## Exercise (30 min)

* find all the words in the tickets
    * HINT: a word is a repeated letter followed by a space or a colon
    * HINT: `[ :]` means a space or a colon
* find all the USD prices
    * HINT: ``` \$ ``` and repeated numbers
    
* find all the high-price tickets
    * HINT: consider `\$`, tripple-digit number, `\.`
"""

#Solution

ti['ticket'].str.findall('([a-zA-Z :]+)') # Find all words in the tickets without any numbers in it.

ti['ticket'].str.extract('(\$ *[0-9]+\.*[0-9]*)') # find all the USD prices

ti['ticket'].str.extractall('(\$ *[0-9][0-9][0-9]+\.*[0-9]*)') #find all the high-price tickets